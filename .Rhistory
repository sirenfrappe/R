if(sequ!=sequDbptm){
cat("两序列不相同！\n")
stop()
}
#sequ为mobidb数据库中对应的序列
sequ <- content(GET("http://mobidb.bio.unipd.it/ws/P30443/uniprot"))$sequence
#mobiDb注释
#使用1A01_HUMAN为例，对应AC为P30443
#设置工作目录
setwd("D:/idps/srcipt")
#加载包，用于获取请求网页的得到的JSON文件
library("httr")
data <- content(GET("http://mobidb.bio.unipd.it/ws/P30443/consensus"))
data
data <- content(GET("http://mobidb.bio.unipd.it/ws/P30443/consensus"))
#sequ为mobidb数据库中对应的序列
sequ <- content(GET("http://mobidb.bio.unipd.it/ws/P30443/uniprot"))$sequence
#读取数据
table <- read.table("./output/UniID/1A01_HUMAN.txt",sep = "\t",header = T,stringsAsFactors = F)
sequDbptm <- paste(as.character(table$residue),collapse = "")
sequ
#mobiDb注释
#使用1A01_HUMAN为例，对应AC为P30443
#设置工作目录
setwd("D:/idps/srcipt")
#加载包，用于获取请求网页的得到的JSON文件
library("httr")
data <- content(GET("http://mobidb.bio.unipd.it/ws/P30443/consensus"))
#sequ为mobidb数据库中对应的序列
sequ <- content(GET("http://mobidb.bio.unipd.it/ws/P30443/uniprot"))$sequence
#读取数据
table <- read.table("./output/UniID/1A01_HUMAN.txt",sep = "\t",header = T,stringsAsFactors = F)
sequDbptm <- paste(as.character(table$residue),collapse = "")
#判断mobidb数据库与dbPTM数据库中序列是否相同
if(sequ!=sequDbptm){
cat("两序列不相同！\n")
stop()
}
#来自手动添加的mobidb数据
disorder.db <- data$mobidb_consensus$disorder$full[[1]][[1]]
tem <- data.frame(matrix(NA,dim(table)[1],1))
for(i in 1:length(disorder.db)){
full(disorder.db,i,tem)
}
full <- function(disorder.db, i, tem) {
qidian <- disorder.db[[i]][[1]]
zhongdian  <- disorder.db[[i]][[2]]
stru <- disorder.db[[i]][[3]]
tem[qidian:zhongdian,1] <- stru
}
for(i in 1:length(disorder.db)){
full(disorder.db,i,tem)
}
tem
full <- function(disorder.db, i, tem) {
qidian <- disorder.db[[i]][[1]]
zhongdian  <- disorder.db[[i]][[2]]
stru <- disorder.db[[i]][[3]]
tem[qidian:zhongdian,1] <- stru
return(tem)
}
for(i in 1:length(disorder.db)){
full(disorder.db,i,tem)
}
tem
for(i in 1:length(disorder.db)){
tem <- full(disorder.db,i,tem)
}
tem
full <- function(disorder.db, i, tem) {
qidian <- disorder.db[[i]][[1]]
zhongdian  <- disorder.db[[i]][[2]]
stru <- disorder.db[[i]][[3]]
tem[qidian:zhongdian,1] <- stru
}
tem <- data.frame(matrix(NA,dim(table)[1],1))
for(i in 1:length(disorder.db)){
tem <- full(disorder.db,i,tem)
}
tem <- data.frame(matrix(NA,dim(table)[1],1))
for(i in 1:length(disorder.db)){
tem <- full(disorder.db,i,tem)
}
tem <- data.frame(matrix(NA,dim(table)[1],1))
for(i in 1:length(disorder.db)){
tem <- full(disorder.db,i,tem)
}
#读取数据
table <- read.table("./output/UniID/1A01_HUMAN.txt",sep = "\t",header = T,stringsAsFactors = F)
full <- function(disorder.db, i, tem) {
qidian <- disorder.db[[i]][[1]]
zhongdian  <- disorder.db[[i]][[2]]
stru <- disorder.db[[i]][[3]]
tem[qidian:zhongdian,1] <- stru
}
sequDbptm <- paste(as.character(table$residue),collapse = "")
#判断mobidb数据库与dbPTM数据库中序列是否相同
if(sequ!=sequDbptm){
cat("两序列不相同！\n")
stop()
}
#来自手动添加的mobidb数据
disorder.db <- data$mobidb_consensus$disorder$full[[1]][[1]]
tem <- data.frame(matrix(NA,dim(table)[1],1))
for(i in 1:length(disorder.db)){
tem <- full(disorder.db,i,tem)
}
tem
full <- function(disorder.db, i, tem) {
qidian <- disorder.db[[i]][[1]]
zhongdian  <- disorder.db[[i]][[2]]
stru <- disorder.db[[i]][[3]]
tem[qidian:zhongdian,1] <- stru
return(tem)
}
tem <- data.frame(matrix(NA,dim(table)[1],1))
full <- function(disorder.db, i, tem) {
qidian <- disorder.db[[i]][[1]]
zhongdian  <- disorder.db[[i]][[2]]
stru <- disorder.db[[i]][[3]]
tem[qidian:zhongdian,1] <- stru
return(tem)
}
for(i in 1:length(disorder.db)){
tem <- full(disorder.db,i,tem)
}
tem
#来自mobidb中derived数据
disorder.derived <- data$mobidb_consensus$disorder$derived
disorder.derived.length <-  length(disorder.derived)
disorder.derived[[1]]
length(disorder.derived[[1]])
disorder.derived[[1]]
length(disorder.derived[[3]])
length(disorder.derived[[3]][[1]])
1:length(disorder.derived[[3]][[1]])
regions <- function(disorder.db, i, tem) {
qidian <- disorder.db[[i]][[1]]
zhongdian  <- disorder.db[[i]][[2]]
stru <- disorder.db[[i]][[3]]
tem[qidian:zhongdian,1] <- stru
return(tem)
}
i <- 3
if(disorder.derived[[i]]$method=="full"){
tem <- data.frame(matrix(NA,dim(table)[1],1))
for (j in 1:length(disorder.derived[[i]][[1]])) {
tem <- regions(disorder.derived,j,tem)
}
colnames(tem) <- "disorder.derived.full"
table <- cbind(table,tem)
}else{
tem  <- data.frame(matrix(NA,dim(table)[1],2))
}
if(disorder.derived[[i]]$method=="full"){
tem <- data.frame(matrix(NA,dim(table)[1],1))
for (j in 1:length(disorder.derived[[i]][[1]])) {
tem <- regions(disorder.db = disorder.derived,j,tem)
}
colnames(tem) <- "disorder.derived.full"
table <- cbind(table,tem)
}else{
tem  <- data.frame(matrix(NA,dim(table)[1],2))
}
regions <- function(disorder.db, i, tem) {
qidian <- disorder.db[[i]][[1]]
zhongdian  <- disorder.db[[i]][[2]]
stru <- disorder.db[[i]][[3]]
tem[qidian:zhongdian,1] <- stru
return(tem)
}
regions(disorder.db = disorder.derived,j,tem)
disorder.derived[[3]]
disorder.derived[[3]][[3]]
disorder.derived[[3]]$regions
disorder.db
disorder.derived
tem <- regions(disorder.db = disorder.derived$regions,j,tem)
tem <- regions(disorder.db = disorder.derived[[j]]$regions,j,tem)
tem
for (j in 1:length(disorder.derived[[i]][[1]])) {
tem <- regions(disorder.db = disorder.derived[[j]]$regions,j,tem)
}
disorder.derived[[j]]
1:length(disorder.derived[[i]][[3]])
1:length(disorder.derived[[3]][[3]])
disorder.derived
disorder.derived[[3]]
disorder.derived[[3]][[1]]
length(disorder.derived[[3]][[1]])
1:length(disorder.derived[[3]][[1]])
1:length(disorder.derived[[i]][[1]])
tem <- data.frame(matrix(NA,dim(table)[1],1))
for (j in 1:length(disorder.derived[[i]][[1]])) {
tem <- regions(disorder.db = disorder.derived[[i]]$regions,j,tem)
}
tem
colnames(tem) <- "disorder.derived.full"
tem  <- data.frame(matrix(NA,dim(table)[1],2))
head(tem)
disorder.derived[[1]]$method
disorder.derived[[2]]$method
paste("disorder.derived",method,".")
method <- disorder.derived[[i]]$method
paste("disorder.derived",method,".")
c(paste("disorder.derived",".",method))
c(paste("disorder.derived",".",method,sep = "."))
colnames(tem) <- c(paste("disorder.derived",method,sep = "."),paste("disorder.derived","regions",sep = "."))
colnames(tem)
head(tem)
disorder.derived[[1]]$regions
disorder.derived[[1]]
disorder.derived[[1]]$scores_n
as.character(disorder.derived[[1]]$scores_n)
tem[,1] <- as.character(disorder.derived[[1]]$scores_n)
tem
colnames(tem) <- c(paste("disorder.derived",method,"scores",sep = "."),paste("disorder.derived","regions",sep = "."))
tem
i
i <- 1
tem  <- data.frame(matrix(NA,dim(table)[1],2))
method <- disorder.derived[[i]]$method
colnames(tem) <- c(paste("disorder.derived",method,"scores",sep = "."),paste("disorder.derived","regions",sep = "."))
#打分数据并入
tem[,1] <- as.character(disorder.derived[[1]]$scores_n)
#打分结果并入
for (j in 1:length(disorder.derived[[i]][[1]])) {
tem <- regions(disorder.db = disorder.derived[[i]]$regions,j,tem)
}
tem
disorder.derived[[1]]$regions
disorder.derived[[1]]$regions[[1]]
disorder.derived[[1]]$regions[[1]][[1]]
j
tem <- regions(disorder.db = disorder.derived[[i]]$regions, j, tem)
regions(disorder.db = disorder.derived[[i]]$regions, j, tem)
tem  <- data.frame(matrix(NA, dim(table)[1], 2))
method <- disorder.derived[[i]]$method
colnames(tem) <-
c(
paste("disorder.derived", "regions", sep = "."),
paste("disorder.derived", method, "scores", sep = ".")
)
#打分数据并入
tem[, 2] <- as.character(disorder.derived[[1]]$scores_n)
#打分结果并入
for (j in 1:length(disorder.derived[[i]][[1]])) {
tem <- regions(disorder.db = disorder.derived[[i]]$regions, j, tem)
}
tem
install.packages("languageserver")
data$mobidb_consensus$disorder[[1]]
data$mobidb_consensus$disorder$predictors
length(data$mobidb_consensus$disorder$predictors)
mobidbZhushi <- function(UniID, UniAC, outputfile) {
#设置工作目录
setwd("D:/idps/srcipt")
#加载httr包，用于获取请求网页的得到的JSON文件
library("httr")
data <-
content(GET(
paste("http://mobidb.bio.unipd.it/ws/", UniAC, "/consensus", sep = "")
))
#sequ为mobidb数据库中对应的蛋白质序列
sequ <-
content(GET(
paste("http://mobidb.bio.unipd.it/ws/", UniAC, "/uniprot", sep = "")
))$sequence
#读取处理DBPTM数据库数据得到的表格，命名为table
table <-
read.table(
paste("./output/UniID/", UniID, ".txt", sep = ""),
sep = "\t",
header = T,
stringsAsFactors = F
)
#sequDbptm是dbptm中相应蛋白的序列
sequDbptm <- paste(as.character(table$residue), collapse = "")
#判断mobidb数据库与dbPTM数据库中序列是否相同，
if (sequ != sequDbptm) {
cat("两序列不相同！\n")
stop()
}
#只做了一个例子，暂时还没发现有序列不同的情况
#来自手动添加的mobidb数据
#disorder下只有一个元素
disorder.db <- data$mobidb_consensus$disorder$full[[1]][[1]]
#新建tem数据框用于存储regions数据
tem <- data.frame(matrix(NA, dim(table)[1], 1))
#循环赋值
for (i in 1:length(disorder.db)) {
tem <- regions(disorder.db, i, tem)
}
#更改列名，合并。
colnames(tem) <- "disorder.db"
table <- cbind(table, tem)
#用于处理derived和predictors数据的函数，两种情况下的结构相似，但区别仍存在，不新建方程处理
#来自mobidb中derived数据
disorder.derived <- data$mobidb_consensus$disorder$derived
disorder.derived.length <- length(disorder.derived)
for (i in 1:disorder.derived.length) {
if (disorder.derived[[i]]$method == "full") {
tem <- data.frame(matrix(NA, dim(table)[1], 1))
for (j in 1:length(disorder.derived[[i]][[1]])) {
tem <- regions(disorder.db = disorder.derived[[i]]$regions, j, tem)
}
colnames(tem) <- "disorder.derived.full"
table <- cbind(table, tem)
} else {
tem <- data.frame(matrix(NA, dim(table)[1], 2))
method <- disorder.derived[[i]]$method
colnames(tem) <-
c(
paste("disorder.derived", "regions", sep = "."),
paste("disorder.derived", method, "scores", sep = ".")
)
#打分数据并入
tem[, 2] <- as.character(disorder.derived[[1]]$scores_n)
#打分结果并入
for (j in 1:length(disorder.derived[[i]][[1]])) {
tem <- regions(disorder.db = disorder.derived[[i]]$regions, j, tem)
}
table <- cbind(table, tem)
}
}
#来自predictior数据
disorder.predictiors <- data$mobidb_consensus$disorder$predictors
disorder.predictiors.length <- length(disorder.predictiors)
for (i in 1:disorder.predictiors.length) {
if (disorder.predictiors[[i]]$method == "simple") {
tem <- data.frame(matrix(NA, dim(table)[1], 1))
for (j in 1:length(disorder.predictiors[[i]][[1]])) {
tem <-
regions(disorder.db = disorder.predictiors[[i]]$regions, j, tem)
}
colnames(tem) <- "disorder.predictiors.simple"
table <- cbind(table, tem)
} else {
tem <- data.frame(matrix(NA, dim(table)[1], 2))
method <- disorder.predictiors[[i]]$method
colnames(tem) <- c(
paste("disorder.predictors", "regions", sep = "."),
paste("disorder.predictors", method, "secores", sep = ".")
)
tem[, 2] <- as.character(disorder.predictiors[[1]]$scores_n)
for (j in 1:length(disorder.predictiors[[i]][[1]])) {
tem <-
regions(disorder.db = disorder.predictiors[[i]]$regions, j, tem)
}
table <- cbind(table, tem)
}
}
regions <- function(disorder.db, i, tem) {
qidian <- disorder.db[[i]][[1]]
zhongian <- disorder.db[[i]][[2]]
stru <- disorder.db[[i]][[3]]
tem[qidian:zhongian, 1] <- stru
return(tem)
}
write.table(
table,
outputfile,
quote = "",
sep = F,
row.names = FALSE
)
}
mobidbZhushi("1A01_HUMAN",P30443,"111111.txt")
mobidbZhushi("1A01_HUMAN","P30443","111111.txt")
mobidbZhushi <- function(UniID, UniAC, outputfile) {
#设置工作目录
setwd("D:/idps/srcipt")
#加载httr包，用于获取请求网页的得到的JSON文件
library("httr")
data <-
content(GET(
paste("http://mobidb.bio.unipd.it/ws/", UniAC, "/consensus", sep = "")
))
#sequ为mobidb数据库中对应的蛋白质序列
sequ <-
content(GET(
paste("http://mobidb.bio.unipd.it/ws/", UniAC, "/uniprot", sep = "")
))$sequence
#读取处理DBPTM数据库数据得到的表格，命名为table
table <-
read.table(
paste("./output/UniID/", UniID, ".txt", sep = ""),
sep = "\t",
header = T,
stringsAsFactors = F
)
#sequDbptm是dbptm中相应蛋白的序列
sequDbptm <- paste(as.character(table$residue), collapse = "")
#判断mobidb数据库与dbPTM数据库中序列是否相同，
if (sequ != sequDbptm) {
cat("两序列不相同！\n")
stop()
}
#只做了一个例子，暂时还没发现有序列不同的情况
#来自手动添加的mobidb数据
#disorder下只有一个元素
disorder.db <- data$mobidb_consensus$disorder$full[[1]][[1]]
#新建tem数据框用于存储regions数据
tem <- data.frame(matrix(NA, dim(table)[1], 1))
#循环赋值
for (i in 1:length(disorder.db)) {
tem <- regions(disorder.db, i, tem)
}
#更改列名，合并。
colnames(tem) <- "disorder.db"
table <- cbind(table, tem)
#用于处理derived和predictors数据的函数，两种情况下的结构相似，但区别仍存在，不新建方程处理
#来自mobidb中derived数据
disorder.derived <- data$mobidb_consensus$disorder$derived
disorder.derived.length <- length(disorder.derived)
for (i in 1:disorder.derived.length) {
if (disorder.derived[[i]]$method == "full") {
tem <- data.frame(matrix(NA, dim(table)[1], 1))
for (j in 1:length(disorder.derived[[i]][[1]])) {
tem <- regions(disorder.db = disorder.derived[[i]]$regions, j, tem)
}
colnames(tem) <- "disorder.derived.full"
table <- cbind(table, tem)
} else {
tem <- data.frame(matrix(NA, dim(table)[1], 2))
method <- disorder.derived[[i]]$method
colnames(tem) <-
c(
paste("disorder.derived", "regions", sep = "."),
paste("disorder.derived", method, "scores", sep = ".")
)
#打分数据并入
tem[, 2] <- as.character(disorder.derived[[1]]$scores_n)
#打分结果并入
for (j in 1:length(disorder.derived[[i]][[1]])) {
tem <- regions(disorder.db = disorder.derived[[i]]$regions, j, tem)
}
table <- cbind(table, tem)
}
}
#来自predictior数据
disorder.predictiors <- data$mobidb_consensus$disorder$predictors
disorder.predictiors.length <- length(disorder.predictiors)
for (i in 1:disorder.predictiors.length) {
if (disorder.predictiors[[i]]$method == "simple") {
tem <- data.frame(matrix(NA, dim(table)[1], 1))
for (j in 1:length(disorder.predictiors[[i]][[1]])) {
tem <-
regions(disorder.db = disorder.predictiors[[i]]$regions, j, tem)
}
colnames(tem) <- "disorder.predictiors.simple"
table <- cbind(table, tem)
} else {
tem <- data.frame(matrix(NA, dim(table)[1], 2))
method <- disorder.predictiors[[i]]$method
colnames(tem) <- c(
paste("disorder.predictors", "regions", sep = "."),
paste("disorder.predictors", method, "secores", sep = ".")
)
tem[, 2] <- as.character(disorder.predictiors[[1]]$scores_n)
for (j in 1:length(disorder.predictiors[[i]][[1]])) {
tem <-
regions(disorder.db = disorder.predictiors[[i]]$regions, j, tem)
}
table <- cbind(table, tem)
}
}
regions <- function(disorder.db, i, tem) {
qidian <- disorder.db[[i]][[1]]
zhongian <- disorder.db[[i]][[2]]
stru <- disorder.db[[i]][[3]]
tem[qidian:zhongian, 1] <- stru
return(tem)
}
write.table(
table,
outputfile,
quote = F,
sep = "\t",
row.names = FALSE
)
}
mobidbZhushi("1A01_HUMAN","P30443","111111.txt")
source('D:/idps/srcipt/func-mobidbZhushi.R', encoding = 'UTF-8')
source('D:/idps/srcipt/func-mobidbZhushi.R', encoding = 'UTF-8')
source('D:/idps/srcipt/func-mobidbZhushi.R', encoding = 'UTF-8')
source('D:/idps/srcipt/func-mobidbZhushi.R', encoding = 'UTF-8')
source('D:/idps/srcipt/func-mobidbZhushi.R', encoding = 'UTF-8')
library(tidyverse)
tibble()
?tibble
library(nycflights13)
airlines
airlines[1]
airlines[1,]
x <- c("a","c","f","g","o")
str_c(x)
str_c(x,"n")
x <- c("apple", "banana", "pear")
str_view(x, "an")
str_c(x,collapse = "")
x2 <- c("Dec", "Apr", "Jam", "Mar")
#pipeline
foo_foo <- little_bunny()
#pipeline
library(magrittr)
foo_foo <- little_bunny()
foo_foo <- little_bunny()
mtcars
?cor
cor(mtcars$disp,mtcars$mp)
double()
